@page "/"
@page "/vehiclesdetails"
@using Services
@using Services.VehicleDetail
@inject IBaseService<VehicleDetailDto> vehicleDetailService
@inject IJSRuntime jsRuntime
@inject HttpClient Http

<h3>List of Vehicle Details</h3>

@if (VehiclesDetails == null)
{
    <p><em> Loading... </em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Owner’s Name</th>
                <th>Manufacturer</th>
                <th>Year of Manufacture</th>
                <th>Weight in Kilograms</th>
                <th>Category</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehicleDetail in VehiclesDetails)
            {
                <tr>
                    <td>@vehicleDetail.FirstName @vehicleDetail.LastName</td>
                    <td>@vehicleDetail.NameOfManufacturer </td>
                    <td>@vehicleDetail.YearOfManufacture </td>
                    <td>@vehicleDetail.Weight </td>
                    <td> <span>@(new MarkupString(vehicleDetail.Path))</span></td>

                </tr>
            }
        </tbody>
    </table>    
}

@code {
  
    private List<VehicleDetailDto> VehiclesDetails;

    private async Task Delete(VehicleDetailDto vehicleDetail)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure????");
        if (confirmed)
        {
            if (vehicleDetailService.Delete(vehicleDetail.VehicleDetailId))
            {
                VehiclesDetails.Remove(vehicleDetail);
            }

        }
    }

    protected override async Task OnInitializedAsync()
    {
        VehiclesDetails = await vehicleDetailService.GetAllAsync();
        base.OnInitialized();
    }
}